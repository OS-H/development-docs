import{_ as s,c as a,o as e,N as n}from"./chunks/framework.719e9f09.js";const y=JSON.parse('{"title":"缓存插件","description":"","frontmatter":{},"headers":[],"relativePath":"chajianhuaxitongdajian/purpose_module-main/缓存组件/缓存插件.md"}'),l={name:"chajianhuaxitongdajian/purpose_module-main/缓存组件/缓存插件.md"},o=n(`<h1 id="缓存插件" tabindex="-1">缓存插件 <a class="header-anchor" href="#缓存插件" aria-label="Permalink to &quot;缓存插件&quot;">​</a></h1><h2 id="版本" tabindex="-1">版本： <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本：&quot;">​</a></h2><pre><code>redis:7.0.11
</code></pre><h2 id="部署过程" tabindex="-1">部署过程： <a class="header-anchor" href="#部署过程" aria-label="Permalink to &quot;部署过程：&quot;">​</a></h2><ol><li>将镜像文件导入到服务器 镜像包名为<code>redis7011.tar</code></li><li>镜像文件所在目录执行 <code>docker load -i redis7011.tar</code></li><li>创建目录</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">创建数据目录 /home/data/redis</span></span>
<span class="line"><span style="color:#A6ACCD;">创建配置文件 /home/config/redis/redis.conf</span></span>
<span class="line"><span style="color:#A6ACCD;">配置文件redis.conf内容根据自身需求书写</span></span></code></pre></div><ol start="4"><li>启动服务，命令如下</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run --name svc-redis -p 16379:6379 -v /home/data/redis:/data -v /home/config/redis/redis.conf :</span></span>
<span class="line"><span style="color:#A6ACCD;">/etc/redis/redis.conf --network=jky_network -d redis:7.0.11</span></span></code></pre></div><p>参数说明： --name svc-redis：指定容器名称为svc-redis，为自定义 --network=jky_network：为容器指定网络为jky_network，同一网络下的容器能够通过容器名称互通。</p><p>启动成功后，通过redis客户端工具连接redis，导入数据脚本</p><h2 id="使用文档" tabindex="-1">使用文档： <a class="header-anchor" href="#使用文档" aria-label="Permalink to &quot;使用文档：&quot;">​</a></h2><p>通过上面部署命令启动完毕的redis，来进行redis相关业务能力调用。 连接Redis需要使用Redis客户端，Redis提供了官方客户端redis-cli，可以在终端中直接输入 redis-cli命令进入交互式命令行界面。 <code>$redis-cli</code></p><p>默认情况下，redis-cli会连接本地Redis服务器。如果要连接远程服务器，可以使用以下命令：<code> $ redis-cli -h &lt;host&gt; -p &lt;port&gt;</code></p><p>其中<code>&lt;host&gt;</code>是Redis服务器IP地址或主机名，<code>&lt;host&gt;</code>是Redis服务监听的端口，默认为6379。</p><p>Redis支持多种数据结构，包括字符串、哈希表、列表、集合和有序集合。以下是一些常用的Redis命令。</p><h3 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-label="Permalink to &quot;字符串操作&quot;">​</a></h3><p>Redis的字符串可以存储任意二进制数据，最大长度为512MB。以下是一些常用的字符串操作命令。 SET key value：设置指定键的值。 GET key：获取指定键的值。 INCR key：将指定键的值加1。 DECR key：将指定键的值减1。</p><h3 id="哈希表操作" tabindex="-1">哈希表操作 <a class="header-anchor" href="#哈希表操作" aria-label="Permalink to &quot;哈希表操作&quot;">​</a></h3><p>Redis的哈希表是一个键值对集合，其中键和值都是字符串类型。以下是一些常用的哈希表操作命令。 HSET key field value：为指定哈希表中的字段设置值。 HGET key field：获取指定哈希表中的字段值。 HGETALL key：获取指定哈希表中的所有键值对。</p><h3 id="列表操作" tabindex="-1">列表操作 <a class="header-anchor" href="#列表操作" aria-label="Permalink to &quot;列表操作&quot;">​</a></h3><p>Redis的列表是一个有序的字符串列表，可以在列表的两端添加或删除元素。以下是一些常用的列表操作命令。 LPUSH key value：将一个或多个值插入到列表头部。 RPUSH key value：将一个或多个值插入到列表尾部。 LPOP key：移除并返回列表的第一个元素。 RPOP key：移除并返回列表的最后一个元素。</p><h3 id="集合操作" tabindex="-1">集合操作 <a class="header-anchor" href="#集合操作" aria-label="Permalink to &quot;集合操作&quot;">​</a></h3><p>Redis的集合是一个无序的字符串集合，每个成员都是唯一的。以下是一些常用的集合操作命令。 SADD key member [member ...]：向指定集合中添加一个或多个成员。 SMEMBERS key：获取指定集合中的所有成员。 SISMEMBER key member：判断指定成员是否存在于集合中。</p><h3 id="有序集合操作" tabindex="-1">有序集合操作 <a class="header-anchor" href="#有序集合操作" aria-label="Permalink to &quot;有序集合操作&quot;">​</a></h3><p>Redis的有序集合是一个有序的字符串集合，每个成员都有一个分数用于排序。以下是一些常用的有序集合操作命令。 ZADD key score member [score member ...] ：向指定有序集合中添加一个或多个成员。 ZRANGE key start stop [WITHSCORES]：按照分数顺序获取指定范围内的成员。 ZREVRANGE key start stop [WITHSCORES] ：按照分数逆序获取指定范围内的成员。</p><h2 id="java案例" tabindex="-1">java案例： <a class="header-anchor" href="#java案例" aria-label="Permalink to &quot;java案例：&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 线上环境</span></span>
<span class="line"><span style="color:#A6ACCD;">spring:</span></span>
<span class="line"><span style="color:#A6ACCD;">  redis:</span></span>
<span class="line"><span style="color:#A6ACCD;">    cluster:</span></span>
<span class="line"><span style="color:#A6ACCD;">      nodes: 10.0.40.13:7000,10.0.40.13:7001,10.0.40.14:7000,10.0.40.14:7001,10.0.40.23:7000,10.0.40.23:7001</span></span>
<span class="line"><span style="color:#A6ACCD;">      max-redirects: 6</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#redis集群自定义基础配置，RedisClusterConfig 配置类会读取这些配置</span></span>
<span class="line"><span style="color:#A6ACCD;">redis:</span></span>
<span class="line"><span style="color:#A6ACCD;">  timeout: 300000 #客户端超时时间单位是毫秒 默认是2000</span></span>
<span class="line"><span style="color:#A6ACCD;">  maxIdle: 300 #最大空闲数</span></span>
<span class="line"><span style="color:#A6ACCD;">  maxTotal: 1000 #控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性</span></span>
<span class="line"><span style="color:#A6ACCD;">  maxWaitMillis: 1000 #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span></span>
<span class="line"><span style="color:#A6ACCD;">  minEvictableIdleTimeMillis: 300000 #连接的最小空闲时间 默认1800000毫秒(30分钟)</span></span>
<span class="line"><span style="color:#A6ACCD;">  numTestsPerEvictionRun: 1024 #每次释放连接的最大数目,默认3</span></span>
<span class="line"><span style="color:#A6ACCD;">  timeBetweenEvictionRunsMillis: 30000 #逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span></span>
<span class="line"><span style="color:#A6ACCD;">  testOnBorrow: true #是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span></span>
<span class="line"><span style="color:#A6ACCD;">  testWhileIdle: true #在空闲时检查有效性, 默认false</span></span>
<span class="line"><span style="color:#A6ACCD;">  password: *** #线上密码</span></span></code></pre></div><h2 id="python案例" tabindex="-1">python案例 <a class="header-anchor" href="#python案例" aria-label="Permalink to &quot;python案例&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">import redis</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 连接到本地的Redis服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">r = redis.Redis(host=&#39;localhost&#39;, port=6379, db=0)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 设置键值对</span></span>
<span class="line"><span style="color:#A6ACCD;">r.set(&#39;mykey&#39;, &#39;hello world&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 获取键值对</span></span>
<span class="line"><span style="color:#A6ACCD;">value = r.get(&#39;mykey&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">print(value)</span></span></code></pre></div>`,29),p=[o];function i(t,r,c,d,h,C){return e(),a("div",null,p)}const m=s(l,[["render",i]]);export{y as __pageData,m as default};
