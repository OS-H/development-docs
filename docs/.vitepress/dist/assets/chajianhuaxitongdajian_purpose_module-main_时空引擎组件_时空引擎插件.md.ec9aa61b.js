import{_ as a,c as e,o as s,N as n}from"./chunks/framework.719e9f09.js";const o="/vitepress-docs/assets/img.71e77d26.png",y=JSON.parse('{"title":"时空引擎插件","description":"","frontmatter":{},"headers":[],"relativePath":"chajianhuaxitongdajian/purpose_module-main/时空引擎组件/时空引擎插件.md"}'),l={name:"chajianhuaxitongdajian/purpose_module-main/时空引擎组件/时空引擎插件.md"},p=n('<h1 id="时空引擎插件" tabindex="-1">时空引擎插件 <a class="header-anchor" href="#时空引擎插件" aria-label="Permalink to &quot;时空引擎插件&quot;">​</a></h1><h2 id="版本" tabindex="-1">版本： <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本：&quot;">​</a></h2><p>2.23.0</p><h2 id="部署过程" tabindex="-1">部署过程： <a class="header-anchor" href="#部署过程" aria-label="Permalink to &quot;部署过程：&quot;">​</a></h2><ol><li><p>将镜像文件导入到服务器（linux系统） 比如镜像包名为<code>geoserver.tar</code></p></li><li><p>镜像文件所在目录执行下列命令，加载镜像 <code>docker load -i geoserver.tar</code></p></li><li><p>创建数据卷 在本地创建一个数据卷，用于保存 GeoServer 数据和配置。使用以下命令创建数据卷： <code>docker volume create geoserver_data</code></p></li><li><p>运行容器 使用以下命令运行容器，并将本地的 8080 端口映射到容器内的 8080 端口：</p></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run -d --name geoserver -p 8080:8080 -v geoserver_data:/opt/geoserver/data_dir kartoza/geoserver</span></span></code></pre></div><ol start="5"><li>访问 GeoServer，现在可以通过浏览器访问 GeoServer。在浏览器中输入 <code>ttp://localhost:8080/geoserver</code> 即可进入 GeoServer 的管理界面。</li><li>查看默认的密码。通过如下命令查看日志，查看启动时候生成的默认密码： <code>docker log containId</code><img src="'+o+`" alt="img.png"></li></ol><h2 id="使用文档" tabindex="-1">使用文档 <a class="header-anchor" href="#使用文档" aria-label="Permalink to &quot;使用文档&quot;">​</a></h2><h3 id="python案例" tabindex="-1">python案例： <a class="header-anchor" href="#python案例" aria-label="Permalink to &quot;python案例：&quot;">​</a></h3><p>定义 Geoserver 的 URL 和数据</p><div class="language-commandline"><button title="Copy Code" class="copy"></button><span class="lang">commandline</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">geoserver_url = &#39;http://localhost:8080/geoserver/rest&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">workspace = &#39;my_workspace&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">store = &#39;my_datastore&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">layer = &#39;my_layer&#39;</span></span></code></pre></div><p>使用 requests 模块发送请求来获取 Geoserver 中的图层信息：</p><div class="language-commandline"><button title="Copy Code" class="copy"></button><span class="lang">commandline</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">url = f&quot;{geoserver_url}/workspaces/{workspace}/datastores/{store}/featuretypes/{layer}.json&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">headers = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;Content-Type&#39;: &#39;application/json&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;Accept&#39;: &#39;application/json&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">response = requests.get(url, headers=headers)</span></span></code></pre></div><p>在上面的代码中，我们向 Geoserver 发送了一个 GET 请求，并在请求头中指定了 Content-Type 和 Accept。我们还将 workspace、store 和 layer 替换为实际值。</p><div class="language-commandline"><button title="Copy Code" class="copy"></button><span class="lang">commandline</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">if response.status_code == 200:</span></span>
<span class="line"><span style="color:#A6ACCD;">    data = json.loads(response.content.decode(&#39;utf-8&#39;))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    print(f&quot;Layer Name: {data[&#39;featureType&#39;][&#39;name&#39;]}&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    print(f&quot;Number of Attributes: {len(data[&#39;featureType&#39;][&#39;attributes&#39;][&#39;attribute&#39;])}&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">else:</span></span>
<span class="line"><span style="color:#A6ACCD;">    print(&quot;Error occurred while retrieving layer information&quot;)</span></span></code></pre></div><p>在上面的代码中，我们首先检查响应的状态码是否为 200（表示请求成功），然后将响应内容 解析为 JSON 格式，并从响应中提取我们需要的信息。如果出现错误，则输出错误消息</p><h3 id="javascript案例" tabindex="-1">JavaScript案例 <a class="header-anchor" href="#javascript案例" aria-label="Permalink to &quot;JavaScript案例&quot;">​</a></h3><p>要从JS中调用GeoServer，可以使用以下步骤：</p><p>首先，确保您在GeoServer上发布了WMS服务。这将允许您通过URL获取地图图层。</p><p>接下来，在JavaScript代码中，使用XMLHttpRequest对象或fetch()函数发出与GeoServer的HTTP请求，并指定所需图层的URL。</p><p>例如，如果您想获取名为“myLayer”的图层，请使用以下代码：</p><div class="language-commandline"><button title="Copy Code" class="copy"></button><span class="lang">commandline</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var layerUrl = &quot;http://localhost:8080/geoserver/wms?service=WMS&amp;version=1.1.0&amp;request=GetMap&amp;layers=myLayer&amp;styles=&amp;bbox=-180,-90,180,90&amp;width=1000&amp;height=500&amp;srs=EPSG:4326&amp;format=image/png&quot;;</span></span></code></pre></div><p>发送HTTP请求后，您可以将响应解析为图像并将其添加到网页上的地图容器。</p><div class="language-commandline"><button title="Copy Code" class="copy"></button><span class="lang">commandline</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var mapContainer = document.getElementById(&quot;map&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">var image = new Image();</span></span>
<span class="line"><span style="color:#A6ACCD;">image.src = layerUrl;</span></span>
<span class="line"><span style="color:#A6ACCD;">mapContainer.appendChild(image);</span></span></code></pre></div><p>请注意，您需要将“myLayer”替换为实际的图层名称，并根据需要更改其他参数，例如“bbox”（边界框）和“srs”（空间参考系）。另外，请确保您已经在HTML文件中创建了一个具有“map”ID的元素，以便图像可以添加到其中。</p>`,25),t=[p];function r(c,i,d,m,h,u){return s(),e("div",null,t)}const A=a(l,[["render",r]]);export{y as __pageData,A as default};
